generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id
  email            String           @unique
  displayName      String?          @map("display_name")
  avatarUrl        String?          @map("avatar_url")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  stripeCustomerId String?          @unique @map("stripe_customer_id")
  activities       Activity[]
  boardActivities  BoardActivity[]  @relation("BoardActivityUser")
  clientsCreated   Client[]         @relation("UserClients")
  issuedInvoices   Invoice[]        @relation("IssuedBy")
  issueComments    IssueComment[]   @relation("IssueCommentAuthor")
  assignedIssues   Issue[]          @relation("IssueAssignee")
  createdIssues    Issue[]          @relation("IssueCreator")
  subscription     Subscription?    @relation("UserSubscription")
  taskActivities   TaskActivity[]   @relation("TaskActivityUser")
  taskAttachments  TaskAttachment[] @relation("TaskAttachmentUploader")
  taskComments     TaskComment[]    @relation("TaskCommentAuthor")
  assignedTasks    Task[]           @relation("TaskAssignee")
  createdTasks     Task[]           @relation("TaskCreator")
  invites          TeamInvite[]     @relation("InvitedBy")
  teamMembers      TeamMember[]
  ownedTeams       Team[]           @relation("TeamOwner")

  @@index([createdAt(sort: Desc)], map: "idx_users_created_at_desc")
  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  stripePriceId    String   @map("stripe_price_id")
  stripeSubId      String   @map("stripe_subscription_id")
  currentPeriodEnd DateTime @map("current_period_end")
  status           String
  createdAt        DateTime @default(now()) @map("created_at")
  user             User     @relation("UserSubscription", fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Client {
  id            String       @id @default(cuid())
  name          String
  email         String
  phone         String?
  company       String?
  address       String?
  notes         String?
  budget        Float?       // Added budget field for client budget management
  status        ClientStatus @default(PROSPECT)
  createdBy     String       @map("created_by")
  createdAt     DateTime     @default(now()) @map("created_at")
  createdByUser User         @relation("UserClients", fields: [createdBy], references: [id], onDelete: Cascade)
  invoices      Invoice[]
  projects      Project[]    @relation("ClientProjects")

  @@index([createdAt(sort: Desc)], map: "idx_clients_created_at_desc")
  @@index([createdBy], map: "idx_clients_created_by")
  @@map("clients")
}

model Invoice {
  id                String             @id @default(cuid())
  invoiceNumber     String             @unique
  clientId          String             @map("client_id")
  issuedById        String             @map("issued_by_id")
  dueDate           DateTime           @map("due_date")
  issuedDate        DateTime           @default(now()) @map("issued_date")
  status            InvoiceStatus      @default(PENDING)
  paymentMethod     PaymentMethod?
  notes             String?
  taxRate           Float?             @map("tax_rate")
  discount          Float?             @default(0)
  currency          String             @default("INR")
  pdfUrl            String?            @map("pdf_url")
  isRecurring       Boolean            @default(false) @map("is_recurring")
  recurrence        InvoiceRecurrence?
  nextIssueDate     DateTime?          @map("next_issue_date")
  lastSentDate      DateTime?          @map("last_sent_date")
  reminderSent      Boolean            @default(false) @map("reminder_sent")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  enablePaymentLink Boolean            @default(false) @map("enable_payment_link")
  eSignatureUrl     String?            @map("e_signature_url")
  watermarkText     String?            @map("watermark_text")
  items             InvoiceItem[]
  client            Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  issuedBy          User               @relation("IssuedBy", fields: [issuedById], references: [id])

  @@index([clientId], map: "idx_invoices_client_id")
  @@index([clientId, status, dueDate], map: "idx_invoices_client_status")
  @@index([dueDate], map: "idx_invoices_due_date")
  @@index([issuedById], map: "idx_invoices_issued_by_id")
  @@index([issuedDate], map: "idx_invoices_issued_date")
  @@index([status], map: "idx_invoices_status")
  @@index([issuedById, status, issuedDate(sort: Desc)], map: "idx_invoices_user_status")
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String   @map("invoice_id")
  description String
  quantity    Int
  rate        Float
  total       Float    @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId], map: "idx_invoice_items_invoice_id")
  @@map("invoice_items")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdBy   String       @map("created_by")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  activities  Activity[]
  boards      Board[]
  projects    Project[]    @relation("TeamProjects")
  invites     TeamInvite[]
  members     TeamMember[]
  owner       User         @relation("TeamOwner", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)], map: "idx_teams_created_at_desc")
  @@index([createdBy], map: "idx_teams_created_by")
  @@map("teams")
}

model TeamMember {
  id         String   @id @default(cuid())
  teamId     String   @map("team_id")
  userId     String   @map("user_id")
  role       String   @default("member")
  addedBy    String   @map("added_by")
  acceptedAt DateTime @default(now()) @map("accepted_at")
  createdAt  DateTime @default(now()) @map("created_at")
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId, role], map: "idx_team_members_role")
  @@index([teamId], map: "idx_team_members_team_id")
  @@index([userId], map: "idx_team_members_user_id")
  @@map("team_members")
}

model TeamInvite {
  id        String    @id @default(cuid())
  teamId    String    @map("team_id")
  email     String
  role      String    @default("member")
  token     String    @unique
  invitedBy String    @map("invited_by")
  usedAt    DateTime? @map("used_at")
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  inviter   User      @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email], map: "idx_team_invites_email")
  @@index([teamId], map: "idx_team_invites_team_id")
  @@index([token], map: "idx_team_invites_token")
  @@map("team_invites")
}

model Activity {
  id        String   @id @default(cuid())
  teamId    String   @map("team_id")
  userId    String   @map("user_id")
  type      String
  title     String
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)], map: "idx_activities_created_at")
  @@index([userId], map: "idx_activities_user_id")
  @@index([userId, createdAt(sort: Desc)], map: "idx_activities_user_recent")
  @@map("activities")
}

model Board {
  id          String          @id @default(cuid())
  name        String
  type        BoardType       @default(KANBAN)
  teamId      String          @map("team_id")
  createdBy   String          @map("created_by")
  settings    Json?
  position    Int             @default(0)
  archived    Boolean         @default(false)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  projectId   String?         @map("project_id")
  description String?
  activities  BoardActivity[]
  lists       BoardList[]
  project     Project?        @relation("ProjectBoards", fields: [projectId], references: [id])
  team        Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  issues      Issue[]         @relation("BoardIssues")
  tasks       Task[]

  @@index([projectId], map: "idx_boards_project_id")
  @@index([teamId], map: "idx_boards_team_id")
  @@index([teamId, position], map: "idx_boards_team_position")
  @@map("boards")
}

model BoardList {
  id        String   @id @default(cuid())
  name      String
  boardId   String   @map("board_id")
  position  Int
  color     String?
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@index([boardId], map: "idx_board_lists_board_id")
  @@index([boardId, position], map: "idx_board_lists_position")
  @@map("board_lists")
}

model Task {
  id             String           @id @default(cuid())
  title          String
  boardId        String           @map("board_id")
  listId         String           @map("list_id")
  assignedTo     String?          @map("assigned_to")
  createdBy      String           @map("created_by")
  priority       TaskPriority     @default(MEDIUM)
  status         TaskStatus       @default(TODO)
  position       Int
  dueDate        DateTime?        @map("due_date")
  completedAt    DateTime?        @map("completed_at")
  estimatedHours Int?             @map("estimated_hours")
  actualHours    Int?             @map("actual_hours")
  tags           String[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  archived       Boolean          @default(false)
  description    String
  issues         Issue[]          @relation("TaskIssues")
  activities     TaskActivity[]
  attachments    TaskAttachment[]
  comments       TaskComment[]
  assignee       User?            @relation("TaskAssignee", fields: [assignedTo], references: [id])
  board          Board            @relation(fields: [boardId], references: [id], onDelete: Cascade)
  creator        User             @relation("TaskCreator", fields: [createdBy], references: [id])
  list           BoardList        @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([assignedTo], map: "idx_tasks_assigned_to")
  @@index([assignedTo, status, dueDate], map: "idx_tasks_assignee_status")
  @@index([boardId], map: "idx_tasks_board_id")
  @@index([boardId, listId, position], map: "idx_tasks_board_list_position")
  @@index([listId], map: "idx_tasks_list_id")
  @@index([priority], map: "idx_tasks_priority")
  @@index([status], map: "idx_tasks_status")
  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("TaskCommentAuthor", fields: [userId], references: [id])

  @@map("task_comments")
}

model TaskAttachment {
  id         String   @id @default(cuid())
  taskId     String   @map("task_id")
  fileName   String   @map("file_name")
  fileUrl    String   @map("file_url")
  fileSize   Int      @map("file_size")
  mimeType   String   @map("mime_type")
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at")
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader   User     @relation("TaskAttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("task_attachments")
}

model BoardActivity {
  id        String   @id @default(cuid())
  boardId   String   @map("board_id")
  userId    String   @map("user_id")
  action    String
  details   Json
  createdAt DateTime @default(now()) @map("created_at")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation("BoardActivityUser", fields: [userId], references: [id])

  @@map("board_activities")
}

model TaskActivity {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  action    String
  details   Json
  createdAt DateTime @default(now()) @map("created_at")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("TaskActivityUser", fields: [userId], references: [id])

  @@map("task_activities")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  clientId    String?       @map("client_id")
  teamId      String        @map("team_id")
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(PLANNING)
  goal        Int?          // Total number of tasks (goal)
  completedTasks Int?       // Number of completed tasks
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  boards      Board[]       @relation("ProjectBoards")
  issues      Issue[]
  client      Client?       @relation("ClientProjects", fields: [clientId], references: [id])
  team        Team          @relation("TeamProjects", fields: [teamId], references: [id])

  @@index([clientId], map: "idx_projects_client_id")
  @@index([status], map: "idx_projects_status")
  @@index([teamId], map: "idx_projects_team_id")
  @@index([teamId, status, createdAt(sort: Desc)], map: "idx_projects_team_status")
  @@map("projects")
}

model Issue {
  id          String         @id @default(cuid())
  title       String
  description String
  status      IssueStatus    @default(OPEN)
  priority    IssuePriority  @default(MEDIUM)
  projectId   String?        @map("project_id")
  boardId     String?        @map("board_id")
  taskId      String?        @map("task_id")
  assignedTo  String?        @map("assigned_to")
  createdBy   String         @map("created_by")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  comments    IssueComment[]
  assignee    User?          @relation("IssueAssignee", fields: [assignedTo], references: [id])
  board       Board?         @relation("BoardIssues", fields: [boardId], references: [id])
  creator     User           @relation("IssueCreator", fields: [createdBy], references: [id])
  project     Project?       @relation(fields: [projectId], references: [id])
  task        Task?          @relation("TaskIssues", fields: [taskId], references: [id])

  @@index([assignedTo], map: "idx_issues_assigned_to")
  @@index([assignedTo, status, priority], map: "idx_issues_assignee_status")
  @@index([boardId], map: "idx_issues_board_id")
  @@index([createdBy], map: "idx_issues_created_by")
  @@index([priority], map: "idx_issues_priority")
  @@index([projectId], map: "idx_issues_project_id")
  @@index([status], map: "idx_issues_status")
  @@map("issues")
}

model IssueComment {
  id        String   @id @default(cuid())
  issueId   String   @map("issue_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user      User     @relation("IssueCommentAuthor", fields: [userId], references: [id], onDelete: Cascade)

  @@map("issue_comments")
}

enum BoardType {
  KANBAN
  SCRUM
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  UPI
  BANK_TRANSFER
  CASH
  CARD
}

enum InvoiceRecurrence {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}
