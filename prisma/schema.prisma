generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  email           String           @unique
  displayName     String?          @map("display_name")
  avatarUrl       String?          @map("avatar_url")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  activities      Activity[]
  boardActivities BoardActivity[]  @relation("BoardActivityUser")
  taskActivities  TaskActivity[]   @relation("TaskActivityUser")
  taskAttachments TaskAttachment[] @relation("TaskAttachmentUploader")
  taskComments    TaskComment[]    @relation("TaskCommentAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  createdTasks    Task[]           @relation("TaskCreator")
  invites         TeamInvite[]     @relation("InvitedBy")
  teamMembers     TeamMember[]
  ownedTeams      Team[]           @relation("TeamOwner")

  @@map("users")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdBy   String       @map("created_by")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  activities  Activity[]
  boards      Board[]
  invites     TeamInvite[]
  members     TeamMember[]
  owner       User         @relation("TeamOwner", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("teams")
}

model TeamMember {
  id         String   @id @default(cuid())
  teamId     String   @map("team_id")
  userId     String   @map("user_id")
  role       String   @default("member")
  addedBy    String   @map("added_by")
  acceptedAt DateTime @default(now()) @map("accepted_at")
  createdAt  DateTime @default(now()) @map("created_at")
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamInvite {
  id        String    @id @default(cuid())
  teamId    String    @map("team_id")
  email     String
  role      String    @default("member")
  token     String    @unique
  invitedBy String    @map("invited_by")
  usedAt    DateTime? @map("used_at")
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  inviter   User      @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@map("team_invites")
}

model Activity {
  id        String   @id @default(cuid())
  teamId    String   @map("team_id")
  userId    String   @map("user_id")
  type      String
  title     String
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Board {
  id          String          @id @default(cuid())
  name        String
  description String?
  type        BoardType       @default(KANBAN)
  teamId      String          @map("team_id")
  createdBy   String          @map("created_by")
  settings    Json?
  position    Int             @default(0)
  archived    Boolean         @default(false)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  activities  BoardActivity[]
  lists       BoardList[]
  team        Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("boards")
}

model BoardList {
  id        String   @id @default(cuid())
  name      String
  boardId   String   @map("board_id")
  position  Int
  color     String?
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("board_lists")
}

model Task {
  id             String           @id @default(cuid())
  title          String
  description    String?
  boardId        String           @map("board_id")
  listId         String           @map("list_id")
  assignedTo     String?          @map("assigned_to")
  createdBy      String           @map("created_by")
  priority       TaskPriority     @default(MEDIUM)
  status         TaskStatus       @default(TODO)
  position       Int
  dueDate        DateTime?        @map("due_date")
  completedAt    DateTime?        @map("completed_at")
  estimatedHours Int?             @map("estimated_hours")
  actualHours    Int?             @map("actual_hours")
  tags           String[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  activities     TaskActivity[]
  attachments    TaskAttachment[]
  comments       TaskComment[]
  assignee       User?            @relation("TaskAssignee", fields: [assignedTo], references: [id])
  board          Board            @relation(fields: [boardId], references: [id], onDelete: Cascade)
  creator        User             @relation("TaskCreator", fields: [createdBy], references: [id])
  list           BoardList        @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("TaskCommentAuthor", fields: [userId], references: [id])

  @@map("task_comments")
}

model TaskAttachment {
  id         String   @id @default(cuid())
  taskId     String   @map("task_id")
  fileName   String   @map("file_name")
  fileUrl    String   @map("file_url")
  fileSize   Int      @map("file_size")
  mimeType   String   @map("mime_type")
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at")
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader   User     @relation("TaskAttachmentUploader", fields: [uploadedBy], references: [id])

  @@map("task_attachments")
}

model BoardActivity {
  id        String   @id @default(cuid())
  boardId   String   @map("board_id")
  userId    String   @map("user_id")
  action    String
  details   Json
  createdAt DateTime @default(now()) @map("created_at")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation("BoardActivityUser", fields: [userId], references: [id])

  @@map("board_activities")
}

model TaskActivity {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  action    String
  details   Json
  createdAt DateTime @default(now()) @map("created_at")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("TaskActivityUser", fields: [userId], references: [id])

  @@map("task_activities")
}

enum BoardType {
  KANBAN
  SCRUM
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}
